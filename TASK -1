This Java code demonstrates K-Means clustering and evaluates the clustering quality using the silhouette score:
Dataset Preparation:

A sample dataset of points is defined as a 2D array (data).
Each point is converted into a DoublePoint object (used by Apache Commons Math for clustering).
K-Means Clustering:

The KMeansPlusPlusClusterer is initialized with 
k=3 (3 clusters).
It clusters the points into groups based on their proximity (minimizing intra-cluster variance).
Cluster Display:

The resulting clusters are printed, showing which points belong to each cluster.
Silhouette Score Calculation:

The silhouette score is computed to evaluate clustering quality:
a: Mean intra-cluster distance (how similar the point is to its cluster).
b: Mean distance to the nearest other cluster (how different the point is from other clusters).
(bâˆ’a)/max(a,b), and the final score is the average of all points



import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.distance.EuclideanDistance;

import java.util.ArrayList;
import java.util.List;

public class ClusteringExample {

    public static void main(String[] args) {
        // Sample dataset
        double[][] data = {
                {1.0, 2.0}, {1.5, 1.8}, {5.0, 8.0}, {8.0, 8.0},
                {1.0, 0.6}, {9.0, 11.0}, {8.0, 2.0}, {10.0, 2.0}, {9.0, 3.0}
        };

        // Convert data to DoublePoint objects
        List<DoublePoint> points = new ArrayList<>();
        for (double[] point : data) points.add(new DoublePoint(point));

        // K-Means Clustering
        KMeansPlusPlusClusterer<DoublePoint> kMeans = new KMeansPlusPlusClusterer<>(3);
        List<Cluster<DoublePoint>> clusters = kMeans.cluster(points);

        // Display results
        System.out.println("Clusters:");
        for (int i = 0; i < clusters.size(); i++) {
            System.out.println("Cluster " + (i + 1) + ":");
            for (DoublePoint point : clusters.get(i).getPoints()) {
                System.out.println("\t" + java.util.Arrays.toString(point.getPoint()));
            }
        }

        // Silhouette Score Calculation
        double silhouetteScore = calculateSilhouetteScore(clusters, points);
        System.out.println("Silhouette Score: " + silhouetteScore);
    }

    private static double calculateSilhouetteScore(List<Cluster<DoublePoint>> clusters, List<DoublePoint> points) {
        double totalScore = 0.0;
        int count = 0;
        EuclideanDistance distance = new EuclideanDistance();

        for (Cluster<DoublePoint> cluster : clusters) {
            for (DoublePoint point : cluster.getPoints()) {
                double a = meanDistance(point, cluster.getPoints(), distance);
                double b = Double.MAX_VALUE;

                for (Cluster<DoublePoint> other : clusters) {
                    if (other != cluster) {
                        b = Math.min(b, meanDistance(point, other.getPoints(), distance));
                    }
                }
                totalScore += (b - a) / Math.max(a, b);
                count++;
            }
        }
        return totalScore / count;
    }

    private static double meanDistance(DoublePoint point, List<DoublePoint> points, EuclideanDistance distance) {
        return points.stream()
                .filter(p -> !p.equals(point))
                .mapToDouble(p -> distance.compute(point.getPoint(), p.getPoint()))
                .average().orElse(0.0);
    }
}
